
Name: Thanh D. Nguyen
Class: CSCI 2001-91
Assignment: generics_lab
Date: 11/29/2018

1.
    a.
    public class CountOddIntegers {
        public static void main(String[] args) {
            Collection<Integer> ci = Arrays.asList(1, 2, 3, 4, 5);
            CountOddIntegers countOddIntegers = new CountOddIntegers();
            int count = countOddIntegers.countOddInteger(ci, new Predicate());
            System.out.println("Number of odd integers = " + count);
        }


         // ===============================BEGIN GENERIC METHOD TO COUNT ODD INTEGER=============================== //
        public <T> int countOddInteger(Collection<T> collection, Generic<T> p) {
            int count = 0;
            for (T elem : collection) {
                if (p.test(elem)) {
                    count++;
                }
            }
            return count;
        }
        // ===============================END GENERIC METHOD TO COUNT ODD INTEGER=============================== //
    }


    interface Generic<T> {
        boolean test(T obj);
    }

    class Predicate implements Generic<Integer> {
        @Override
        public boolean test(Integer obj) {
            return obj % 2 != 0;
        }
    }


    ** EXPLAINING THE SOLUTION

    + The Generic Interface with parameter type T, then every other class which implements
    this interface then it has to define the type T of the interface, so it could override
    methods in the Generic interface with the new type parameter, in this case is Integer type.

    + I failed to figure out other ways to define the parameter type T to type Integer without
    using interface in order to apply my calculation.

     -------------------------------------------------------------------------------------------------------------------

     b.
     public class IsPrime {

         public static void main(String[] args) {
             IsPrime isPrime = new IsPrime();
             Collection<Integer> collection = Arrays.asList(1,3,7,9);
             int count = isPrime.countPrimeNumber(collection, new PrimeNumver());

             System.out.println("Number of prime = " + count);
         }

         // ===============================BEGIN GENERIC METHOD TO COUNT PRIME INTEGER=============================== //

         public <T> int countPrimeNumber(Collection<T> collection, GenericPrime<T> g){
             int count = 0;
             for (T elem: collection){
                 if (g.test(elem)){
                     count++;
                 }
             }

             return count;
         }

         // ===============================END GENERIC METHOD TO COUNT PRIME INTEGER================================= //
     }

     interface GenericPrime<T>{
         boolean test(T obj);
     }

     class PrimeNumver implements GenericPrime<Integer>{
         @Override
         public boolean test(Integer n) {
             if(n == 1){
                 return false;
             }else{
                 for(int i = 2; i <= Math.sqrt((double)n); i++){
                     if(n % i == 0){
                         return false;
                     }
                 }return true;
             }
         }
     }

     ** EXPLAINING THE SOLUTION

     + Similar to part A, we have GenericPrime integer with parameter type T. Any other class which implements the
     interface then it has to define the type T to a certain type such as Integer in this case, and override methods in
     the interface with a new parameter type.

     + The generic method countPrimeNumber will accept a Collection with type T and a GenericPrime interface. Inside the
     method, each element in the collection array will be passed into the test(T) method in the interface. This method
     has already overridden.

     + The challenge i got in this section is overriding the test(T) method in the interface. This override method has
     to define a prime number (The number which only divisible by itself and 1 is known as a prime number).



2.
    public final class Algorithm {
        public <T> T max(T x, T y) {
            return x > y ? x : y;
        }
    }

    ** ANSWER

    + The following class will not be compiled because T here is type parameter, and it just a symbol, like a variable
    name. Those operators "<,>,.." can only be used for primitive types which directly contain values uch as byte, short,
    int, long,..

3.
    public class ExchangePosition {

        public static void main(String[] args) {

            Integer[] ints = {10, 20, 30, 40};
            ExchangePosition exchangePosition = new ExchangePosition();
            exchangePosition.exchangePosition(ints); // exchange int[]

            int count = 1;
            for (int num : ints) {
                System.out.println(count + ". " + num);
                count++;
            }
        }

        // ===============================BEGIN GENERIC METHOD TO EXCHANGE POSITION================================= //
        public <T> void exchangePosition(T[] array) {
            for (int a = 0; a < array.length - 1; a++){
                T temp = array[a];
                array[a] = array[a + 1];
                array[a + 1] = temp;
            }
        }
        // ===============================END GENERIC METHOD TO EXCHANGE POSITION================================= //
    }

    ** EXPLAINING THE SOLUTION

    + In the generic exchangePosition method, T is type parameter and it is defined as a array "T[]". When we pass
    parameter to the method, T can be substituted by Integer type in this case.

4. If the compiler erases all type parameters at compile time, why should you use generics?

    ** ANSWER

    + A Java compiler applies strong type checking to generic code and issues errors if the code violates type safety.
    Fixing compile-time errors is easier than fixing runtime errors, which can be difficult to find.

    + Enabling programmers to implement generic algorithms.
    By using generics, programmers can implement generic algorithms that work on collections of different types,
    can be customized, and are type safe and easier to read.

    + Elimination of casts:
    When re-written to use generics, the code does not require casting:

    List<Integer> list = new ArrayList<Integer>();
    list.add(1);
    String s = list.get(0);   // no cast

5.
    public class Pair {

        public Pair(Object key, Object value) {
            this.key = key;
            this.value = value;
        }

        public Object getKey()   { return key; }
        public Object getValue() { return value; }

        public void setKey(Object key)     { this.key = key; }
        public void setValue(Object value) { this.value = value; }

        private Object key;
        private Object value;
    }

    ** EXPLAINING THE SOLUTION

    + After type erasure as the process of forcing constraints only at compile time and discarding the element type
    information at runtime.

    + When compile, the unbound type K, V will be replaced with actual types of object.
    + The compiler ensures type safety of our code and prevents runtime errors.

6.
    public static int findInt(Comparable[] t, Comparable el){

    }

    ** EXPLAINING THE SOLUTION

    + In this case, the type parameter is bound <T extends Comparable<T>>, so when compiled, the bound type parameter T
    is replaced by the first bound class, Comparable in this case.

7.
    ** ANSWER: Yes

    ** EXPLAINING THE SOLUTION

    + This is called Java Generic's extend. In this case "(List<? extends Number> list)" the "? extends" tells the
    compiler that we want to use some unknown subtype of Number. We explicitly constrain the wildcard (the ?) to represent
    the unknown subtype of number. We say the method is a covariant use of the List of Numbers; it works with any List
    of any subtype of Number.

8.
    public final class Algorithm {
        public static <T extends Object & Comparable<? super T>>
            T max(List<? extends T> list, int begin, int end) {

            T maxElem = list.get(begin);

            for (++begin; begin < end; ++begin)
                if (maxElem.compareTo(list.get(begin)) < 0)
                    maxElem = list.get(begin);
            return maxElem;
        }
    }

9.
    ** ANSWER: No

    ** EXPLAINING THE SOLUTION
    + Since a class's static field is a class-level variable share by all non-static objects of the class. Hence, static
    fields of type parameters are not allowed.

10.
    ** ANSWER: No

    ** EXPLAINING THE SOLUTION
    + Circle is a subclass of Shape, but Node<Circle> is not a subtype of Node<Shape>, so the code couldn't compile.

11.
    ** ANSWER: Yes

    ** EXPLAINING THE SOLUTION
    + Because Node<String> is a subtype of Comparable<String>.

12.
    public final class Algorithm {

        public static <T>
            int findFirst(List<T> list, int begin, int end, UnaryPredicate<T> p) {

            for (; begin < end; ++begin)
                if (p.test(list.get(begin)))
                    return begin;
            return -1;
        }

        // x > 0 and y > 0
        public static int gcd(int x, int y) {
            for (int r; (r = x % y) != 0; x = y, y = r) { }
                return y;
        }
    }

    public interface UnaryPredicate<T> {
        public boolean test(T obj);
    }

    The following program tests the findFirst method:

    class RelativelyPrimePredicate implements UnaryPredicate<Integer> {
        public RelativelyPrimePredicate(Collection<Integer> c) {
            this.c = c;
        }

        public boolean test(Integer x) {
            for (Integer i : c)
                if (Algorithm.gcd(x, i) != 1)
                    return false;

            return c.size() > 0;
        }

        private Collection<Integer> c;
    }

    public class Test {
        public static void main(String[] args) throws Exception {

            List<Integer> li = Arrays.asList(3, 4, 6, 8, 11, 15, 28, 32);
            Collection<Integer> c = Arrays.asList(7, 18, 19, 25);
            UnaryPredicate<Integer> p = new RelativelyPrimePredicate(c);

            int i = ALgorithm.findFirst(li, 0, li.size(), p);

            if (i != -1) {
                System.out.print(li.get(i) + " is relatively prime to ");
                for (Integer k : c)
                    System.out.print(k + " ");
                System.out.println();
            }
        }
    }


